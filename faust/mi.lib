ma = library("maths.lib");
ba = library("basics.lib");

// initialize the state of a variable in a letrec system (only first order)
//initState(init) = +(init : ba.impulsify);
initState((init)) = R(0,init)
with{
  R(n,(initn,init)) = +(initn : ba.impulsify@n) : R(n+1,init);
  R(n,initn) = +(initn : ba.impulsify@n);
};

// integrated oscillator (mass-spring-ground system)
// m, k, z: mass, stiffness, damping (algorithmic values)
// x0, x1: initial position and delayed position
osc(m,k,z,x0,x1) = equation
with{
  A = 2 - (k + z)/m;
  B = z/m - 1;
  C = 1/m;
  equation = x 
	letrec{
    'x = A*(x : initState(x0)) + B*(x' : initState(x1)) + *(C);
	};
};

// punctual mass module
// m: mass (algorithmic value)
// x0, x1: initial position and delayed position
mass(m,x0,x1) = equation
with{
  A = 2;
  B = -1;
  C = 1/m;
  equation = x 
	letrec{
    'x = A*(x : initState(x0)) + B*(x' : initState((x1,x0))) + *(C);
	};
};

// punctual ground module
// x0: initial position
ground(x0) = equation
with{
  // could this term be removed or simlified? Need "unused" input force signal for routing scheme
  C = 0;
  equation = x 
	letrec{
		'x = (x : initState(x0)) + *(C);
	};
};

// spring
// k,z: stiffness and daming (algorithmic values)
spring(k,z,x1r0,x2r0,x1,x2) = 
  k*(x1-x2) + 
  z*((x1 - (x1' : initState(x1r0))) - (x2 - (x2' : initState(x2r0)))) <: *(-1),_;

// nlPluck
// 1D non-linear picking Interaction algorithm
nlPluck(k,scale,x1,x2) = 
  select2(absdeltapos < tipdist,
    select2(absdeltapos < scale,
	  		0,
	  		ma.signum(deltapos)* -tipdist * Kp + k * deltapos
	  		),
	(Kp - k) * -deltapos
	) <:  *(-1),_
with{
  deltapos = x1 - x2;
  absdeltapos = abs(deltapos);
  sharpness = 10;
  tipdist = scale / sharpness;
  Kp = k * sharpness;
};


// nlBow
// 1D non-linear bowing Interaction algorithm 
nlBow(z,scale,x1r0,x2r0,x1,x2) = 
  select2(
    absspeed>scale,
    select2(
      absspeed>(scale*0.333),
      z*speed,
      z*(ma.signum(speed)*scale*0.333) - z*0.25*speed),
    0) <: *(-1),_
with{
  speed = ((x1 - x1') - (x2 - x2'));
  absspeed = abs(speed);
};

// collision
// k,z: stiffness and daming (algorithmic values)
// thres: position threshold for the collision to be active
collision(k,z,thres,x1r0,x2r0,x1,x2) = 
  spring(k,z,x1r0,x2r0,x1,x2-thres) : (select2(comp,0,_),select2(comp,0,_))
with{
  comp = (x2-x1) < thres;
};

posInput(init) = _,_ : !,_ : initState(init);
